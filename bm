#!/usr/bin/env bash
#
# Backup local & remote data, store backups and checksums in a 
# tar file, and store in central location, organized by date

CONFIG=./config
LOG=

init() {
  source $CONFIG \
    || logLevel=4 err "error loading config file $CONFIG"
  verifyConfig
  [[ $logLevel -gt 3 ]] && v="-v" # $v is to enable logging for some tools

  log 4 "destRoot=$destRoot"
  log 4 "serverListDir=$serverListDir"
  log 4 "zipper=$zipper"
  log 4 "zipperExt=$zipperExt"
  log 4 "hasher=$hasher"
  log 4 "hasherExt=$hasherExt"
}

verifyConfig() {
  local readonly msgPrefix="config validation error:"

  [[ $logLevel -le 4 ]] && [[ $logLevel -ge 1 ]] \
    || logLevel=4 err "log level not in [1-4]"

  [[ -n $destRoot ]] \
    || err "$msgPrefix \$destRoot not set"

  mkdir -p "$destRoot" \
    || err "$msgPrefix $destRoot is not a directory"

  [[ -w $destRoot ]] \
    || err "$msgPrefix $destroot is not writable"

  [[ -n $serverListDir ]] \
    || err "$msgPrefix \$serverListDir not set"

  [[ -d $serverListDir ]] \
    || err "$msgPrefix $serverListDir is not a directory"

  [[ -n $zipper ]] \
    || err "$msgPrefix \$zipper not set"

  [[ -n $zipperExt ]] \
    || err "$msgPrefix \$zipperExt not set"

  command -v "${zipper%% *}" &> /dev/null \
    || err "$msgPrefix command '$zipper' not found"

  [[ -n $hasher ]] \
    || err "$msgPrefix \$hasher not set"

  [[ -n $hasherExt ]] \
    || err "$msgPrefix \$hasherExt not set"

  command -v "${hasher%% *}" &> /dev/null \
    || err "$msgPrefix command '$hasher' not found"
}

log() {
  local readonly lvl=$1
  local readonly msg=$2
  [[ $lvl -le $logLevel ]] || return 0

  local readonly timestamp=$(date +'[%D] [%T]')
  case "$lvl" in
    1) prelog='[ERR!]' ;;
    2) prelog='[WARN]' ;;
    3) prelog='[INFO]' ;;
    4) prelog='[DBUG]' ;;
    *) err "invalid log level: $lvl" ;;
  esac
  echo "$prelog $timestamp ${serverName:+[$serverName] }$msg" >> /dev/stderr
}

err() {
  log 1 "$1"
  exit 1
}

parseServerFile() {
  local targetFile="$1"
  while read ln; do
    local line=$(echo "$ln" | tr -s '[:blank:]')
    [[ $line == \#* ]] && continue # support comments in target files

    local key=${line%% =*}
    local val=${line#*= }
    case $key in
      type) targetType=$val ;;
      host) targetHost=$val ;;
      user) targetUser=$val ;;
      pass) targetPass=$val ;;
      port) targetPort=$val ;;
      include) include=$val ;;
      preCmnd) preCmnd=$val ;;
      args) targetArgs=$val ;;
    esac
    log 4 "$key=$val"
  done < "$targetFile"
}

filesBackup() {
  local dumpFile=${serverName}.tar

  log 3 "creating files backup: ($include) > $dumpFile"
  $preCmnd tar $targetArgs $v -c $include > "$dumpFile" \
    || err "error creating tar backup"

  zipAndHashDump "$dumpFile"
}

sqlBackup() {
  dbDumpArgs="--host=$targetHost
              --port=$targetPort
              $v"
  case $targetType in
    mysql)
      dbDumpArgs="${targetArgs:-$defaultMysqlArgs}
                  --user=$targetUser
                  --password=$targetPass
                  $dbDumpArgs"
      dbDump="mysqldump"
      ;;
    psql)
      dbDumpArgs="${targetArgs:-$defaultPsqlArgs}
                  --username=$targetUser
                  $dbDumpArgs"
      dbDump="pg_dump"
      ;;
  esac

  dbList=($include)
  log 3 "target databases are: $include"

  for db in "${dbList[@]}"; do
    log 3 "starting backup process for $db"
    backupDB "$db"
  done
}

backupDB() {
  local dbName=$1
  local dumpFile=${dbName}.sql

  log 3 "dumping database: $dbName > $dumpFile"
  $preCmnd $dbDump $dbDumpArgs "$dbName" > "$dumpFile" \
    || err "error creating database backup $dumpFile"

  zipAndHashDump "$dumpFile"
}

zipAndHashDump() {
  local dumpFile=$1
  local dumpFile_z=${dumpFile}.$zipperExt
  local dumpFile_h=${dumpFile_z}.$hasherExt

  log 3 "compressing dump: $dumpFile > $dumpFile_z"
  $zipper "$dumpFile" > "$dumpFile_z" \
    || err "error creating compressed dump $dumpFile_z"

  rm $v "$dumpFile"

  log 3 "creating $hasherExt checksum: $dumpFile_z > $dumpFile_h"
  $hasher "$dumpFile_z" > "$dumpFile_h" \
    || err "error creating checksum $dumpFile_h"
}

getDestFile() {
  destFile=$destDir/${targetType}_backup_${serverName}_$(date +%y_%m_%d).tar
  if [[ -f $destFile ]]; then
    log 2 "destination file $destFile already exists"
    local tag=0
    local initialName="$destFile"
    while [[ -f $destFile ]]; do
      tag=$(( tag + 1 ))
      destFile="${initialName%.tar}-${tag}.tar"
      log 4 "trying destination file name: $destFile"
    done
  fi
  echo "$destFile"
}

main() {
  init
  log 3 "[BACKUPS START]"

  destDir=$destRoot/$(date +%Y)/$(date +%m)
  mkdir $v -p "$destDir" || err "couldn't access backups directory"

  log 3 "destination directory for backups is $destDir"

  for serverFile in $serverListDir/*; do
    serverName=${serverFile##*/} # the server name is the file's name
    log 3 "[BACKUP START]"

    parseServerFile "$serverFile"
    log 3 "parsed config for server"

    workdir=$(mktemp -d)
    log 4 "workspace for server backup is $workdir"
    cd "$workdir" \
      || err "$workdir can't be accessed"

    destFile=$(getDestFile)
    log 3 "storing backups in file: $destFile"

    case $targetType in
      mysql|psql) (sqlBackup)   ;;
      files)      (filesBackup) ;;
      *) (err "unrecognized backup type: '$targetType'") ;;
    esac || { log 2 "[BACKUP FAIL]"; continue; }

    tar $v -c ./* > "$destFile" \
      || err "error creating tar file $destFile"

    chmod $v 600 "$destFile" \
      || err "error setting permissions on $destFile"

    log 4 "deleting temporary workspace: $workdir"
    cd - > /dev/null
    rm $v -rf "$workdir"

    log 3 "[BACKUP DONE]"
    unset targetType targetHost targetPort targetUser \
          targetArgs targetPass serverName include preCmnd
  done
  log 3 "[BACKUPS DONE]"; echo
}

main &>> "${LOG:-/dev/stderr}"
