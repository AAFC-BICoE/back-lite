#!/usr/bin/env bash
#
# Backup local & remote mysql databases, store backups and
# checksums in a tar file, and store in central location,
# organized by date

CONFIG=./config
LOG=

verifyConfig() {
  local readonly msgPrefix="config validation error:"

  [ $logLevel -le 4 ] && [ $logLevel -ge 1 ] \
    || logLevel=4 err "log level not in [1-4]"

  [ -n "$destRoot" ] \
    || err "$msgPrefix \$destRoot not set"

  [ -d "$destRoot" ] \
    || err "$msgPrefix $destRoot is not a directory"

  [ -w "$destRoot" ] \
    || err "$msgPrefix $destroot is not writable"

  [ -n "$serverListDir" ] \
    || err "$msgPrefix \$serverListDir not set"

  [ -d "$serverListDir" ] \
    || err "$msgPrefix $serverListDir is not a directory"

  [ -n "$zipper" ] \
    || err "$msgPrefix \$zipper not set"

  [ -n "$zipperExt" ] \
    || err "$msgPrefix \$zipperExt not set"

  command -v "${zipper%% *}" &> /dev/null \
    || err "$msgPrefix command '$zipper' not found"

  [ -n "$hasher" ] \
    || err "$msgPrefix \$hasher not set"

  [ -n "$hasherExt" ] \
    || err "$msgPrefix \$hasherExt not set"

  command -v "${hasher%% *}" &> /dev/null \
    || err "$msgPrefix command '$hasher' not found"
}

init() {
  source $CONFIG
  verifyConfig
  [[ $logLevel -gt 3 ]] && v="-v" # $v is to enable logging for some tools

  log 4 "destRoot=$destRoot"
  log 4 "serverListDir=$serverListDir"
  log 4 "zipper=$zipper"
  log 4 "zipperExt=$zipperExt"
  log 4 "hasher=$hasher"
  log 4 "hasherExt=$hasherExt"
}

backupDB() {
  local readonly dbName="$1"
  local readonly dumpFile="${dbName}.sql"

  log 3 "dumping database: $dbName"
  $pre_cmd mysqldump $mysqldump_args "$dbName" > "$dumpFile" \
    || err "error creating database backup"

  log 3 "compressing database dump: $dbName"
  $zipper "$dumpFile" > "${dumpFile}.$zipperExt" \
    || err "error compressing database dump"

  rm $v "$dumpFile"

  log 3 "creating checksum of database backup: $dbName"
  $hasher "${dumpFile}.$zipperExt" > "${dumpFile}.${zipperExt}.$hasherExt" \
    || err "error hashing backup $dumpFile"
}

log() {
  local readonly lvl=$1
  local readonly msg=$2
  [[ $lvl -le $logLevel ]] || return 0

  local readonly timestamp=$(date +'[%D] [%T]')
  case "$lvl" in
    1) prelog='[ERR!]' ;;
    2) prelog='[WARN]' ;;
    3) prelog='[INFO]' ;;
    4) prelog='[DBUG]' ;;
    *) err "invalid log level: $lvl" ;;
  esac
  echo "$prelog $timestamp $msg" >> /dev/stderr
}

err() {
  log 1 "$1"
  exit 1
}

parseServerFile() {
  local readonly targetFile="$1"
  while read line; do
    line=$(echo $line | tr -s '[:blank:]')
    local readonly commentPattern='^\s*\#.*'
    [[ $line =~ $commentPattern ]] && continue

    local key=${line%% =*}
    local val=${line#*= }
    case $key in
      type) targetType=$val ;;
      host) targetHost=$val ;;
      user) targetUser=$val ;;
      pass) targetPass=$val ;;
      port) targetPort=$val ;;
      include) include=$val ;;
      pre_cmd) pre_cmd=$val ;;
      tar_arg) tar_arg=$val ;;
    esac
    log 4 "$key=$val"
  done < "$targetFile"
}

mysqlBackup() {
  mysqldumpArgs="--opt
                 --comments=0
                 --compress
                 --hex-blob
                 --max-allowed-packet=1G
                 --no-autocommit"

  commonMysqlArgs="--user=$targetUser
                   --password=$targetPass
                   --host=$targetHost
                   --port=$targetPort"

  dbList=($include)
  log 3 "target databases are: $include"

  mysqldump_args="$mysqldumpArgs $commonMysqlArgs $v"
  for db in "${dbList[@]}"; do
    log 3 "starting backup process for $db"
    backupDB "$db"
  done
}

filesBackup() {
  log 3 "starting backup process for $serverName"
  log 3 "target files/directories are: $include"
  dumpFile=${serverName}.tar
  
  $pre_cmd tar $tar_arg $v -c $include > "$dumpFile" \
    || err "error creating files backup for $serverName"

  log 3 "compressing files backup $serverName"
  $zipper "$dumpFile" > "${dumpFile}.$zipperExt" \
    || err "error compressing backup file for $serverName"

  rm $v "$dumpFile"

  log 3 "creating checksum for $serverName"
  $hasher "${dumpFile}.$zipperExt" > "${dumpFile}.${zipperExt}.$hasherExt" \
    || err "error creating checksum for $serverName"
}

getDestFile() {
  destFile="$destDir/${targetType}_backup_${serverName}_$(date +%y_%m_%d).tar"
  if [[ -f $destFile ]]; then
    log 2 "destination file $destFile already exists"
    local tag=0
    initialName="$destFile"
    while [ -f "$destFile" ]; do
      tag=$(( tag + 1 ))
      destFile="${initialName%.tar}-${tag}.tar"
      log 4 "trying destination file name: $destFile"
    done
  fi

  log 3 "storing backups for $serverName in file: $destFile"
}

main() {
  init
  log 3 "[BACKUPS START]"

  destDir=$destRoot/$(date +%Y)/$(date +%m)
  mkdir $v -p "$destDir" || err "couldn't access backups directory"
  log 3 "destination directory for backups is $destDir"

  for serverFile in $serverListDir/*; do
    serverName=${serverFile##*/} # the server name is the file's name
    log 3 "[BACKUP START: $serverName]"
    
    parseServerFile "$serverFile"
    log 3 "parsed config for server: $serverName"

    workdir=$(mktemp -d)
    log 4 "workspace for server $serverName is $workdir"
    cd "$workdir" \
      || err "$workdir can't be accessed"

    getDestFile

    case $targetType in
      mysql) (mysqlBackup) ;;
      files) (filesBackup) ;;
      *) (err "unrecognized backup type: '$targetType'") ;;
    esac || { log 2 "[BACKUP FAIL: $serverName]"; continue; }

    tar $v -c ./* > "$destFile" \
      || err "error creating tar file $destFile"

    log 4 "deleting temporary workspace: $workdir"
    cd - > /dev/null
    rm $v -rf "$workdir"

    log 3 "[BACKUP DONE: $serverName]"
  done
  log 3 "[BACKUPS DONE]"
}

main &>> "${LOG:-/dev/stderr}"
